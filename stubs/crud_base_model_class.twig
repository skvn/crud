<?php namespace {{ model.namespace }}\Crud;

use Skvn\Crud\Models\CrudModel;
use Skvn\Crud\Models\CrudModelCollectionBuilder;
{%  if model.attaches %}use Skvn\Crud\Traits\AttachmentTrait;
use Skvn\Crud\Models\CrudFile;
{% endif %}
{% if model.inline_img %}use Skvn\Crud\Traits\InlineImgTrait;{% endif %}

class {{ model.name }}Base extends CrudModel{

{% if model.traits %}
    use  {{ model.traits|join(', ') }} ;
{% endif %}


    protected $table = '{{ model.table }}';
	{%  if not  model.timestamps  %}
    public $timestamps = false;
	{% endif %}

    {% if model.attaches or model.inline_img %}
	public function __construct(array $attributes = array())
	{
	    {% for a in model.attaches %}
        $this->setAttach('{{ a.column }}',['multi'=>{{ a.multi }}]);
        {% endfor %}
        {% if model.inline_img %}
        $this->setInlineImgCols({{ model.inline_img|json_encode|raw }});
        {% endif %}
        parent::__construct($attributes);
    }//
    {% endif %}


    //LISTS data providers

    {%  for alias, list in model.list %}
    /**
    /* Query generation for "{{ list.title }}" list
    /* Override this method to change the dataset
    /* @param $order  Sort order from the request
    /* @param $joins  array  Array of joins to use in with($joins); Eloquent method
    */
    public function   {{ camel_case("get_"~alias~"_list_query") }}($joins = []) {
            return CrudModelCollectionBuilder :: createEmpty($this)->createBasicListQuery($joins);
     }
    {% endfor %}

    {#
    public static function boot()
    {
        {%  if model.attaches %}self::attachBoot();
        {% endif %}
        {% if model.inline_img %}self::inlineImgBoot();
        {% endif %}
        parent::boot();
    }
    #}

    {% for a in model.attaches %}
    {% if a.multi == '1' %}
    public function {{ a.column }}()
    {
         return $this->belongsToMany('\Skvn\Crud\Models\CrudFile', '{{ a.pivot_table }}');
    }
    {% endif %}
    {% endfor %}


}
